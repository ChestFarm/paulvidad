_G.d = true
local function HttpGet(url)
   return game:GetService("HttpService"):JSONDecode(htgetf(url))
end
if tonumber(game.PlaceId) == 2753915549 then
game:GetService("ReplicatedStorage"):WaitForChild("Remotes")
local TeleportService = game:GetService("TeleportService")
while _G.d and wait() do
   local claimed = 0
local oh1 = "SetTeam"
local oh2 = "Marines"
game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer(oh1, oh2)
   for i,d in pairs(game:GetService("Workspace"):GetChildren()) do
    if string.find(d.Name, "Chest") ~= nil then
    claimed = claimed + 1
    d.CanCollide = false
if game.Players.LocalPlayer.Character then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = d.CFrame
end
    wait(0.1)
    end
   end
   if claimed == 0 then
       pcall(function()
           local d = HttpGet("https://www.roblox.com/games/getgameinstancesjson?placeId=" .. game.PlaceId .. "&startindex=0")
           local f = HttpGet("https://www.roblox.com/games/getgameinstancesjson?placeId=" .. game.PlaceId .. "&startindex=".. math.random(0,tonumber(d.TotalCollectionSize)))
           local c = f.Collection[math.random(1,#f.Collection)]
           game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, c.Guid)
       end)
       wait(0.5)
   end
end
end

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

local HttpService, TPService = game:GetService"HttpService", game:GetService"TeleportService";
local OtherServers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
for Index, Server in next, OtherServers["data"] do
   if Server ~= game.JobId then
       print(Server["id"])
       TPService:TeleportToPlaceInstance(game.PlaceId, Server["id"])
       break
   end
end
